{
  "address": "0x38922cd56f85100614e414C56E97Dec59a323efa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePerLPToken",
          "type": "uint256"
        }
      ],
      "name": "FeesAccrued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "FeesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePaid",
          "type": "uint256"
        }
      ],
      "name": "FlashSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityMinted",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityBurned",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidityMinted",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "secondsAgo",
          "type": "uint32"
        }
      ],
      "name": "consultTwapA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceAvg",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "secondsAgo",
          "type": "uint32"
        }
      ],
      "name": "consultTwapB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceAvg",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeDebtA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeDebtB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePerLPTokenA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePerLPTokenB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "flashSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalLiquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getSwapAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidityAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sharePercentage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "observations",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "priceACumulative",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceBCumulative",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "observationsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidityAmount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "den",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenA",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenB",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd5d5bcafbbf9c63de2fc3e58cfc52798fb9b67db8c1dd157347559919b82ad96",
  "receipt": {
    "to": null,
    "from": "0x2A1Bc0c9C69C8C460E531C859d0c503bB1274083",
    "contractAddress": "0x38922cd56f85100614e414C56E97Dec59a323efa",
    "transactionIndex": 1,
    "gasUsed": "2743416",
    "logsBloom": "0x
    "blockHash": "0x0c9a71b93d94816b14c3eae7db1d80741b3003a731b0c425b84032d43291b774",
    "transactionHash": "0xd5d5bcafbbf9c63de2fc3e58cfc52798fb9b67db8c1dd157347559919b82ad96",
    "logs": [],
    "blockNumber": 27862356,
    "cumulativeGasUsed": "2789524",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9551eDef00De5f2b117B202ba3c78720D348Cfb6",
    "0xA578878755522EF390c479699581D026fd875f47"
  ],
  "numDeployments": 2,
  "solcInputHash": "cb8e8e041b490cc4069655271f56a7c1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePerLPToken\",\"type\":\"uint256\"}],\"name\":\"FeesAccrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"FeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"}],\"name\":\"FlashSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityMinted\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityBurned\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"secondsAgo\",\"type\":\"uint32\"}],\"name\":\"consultTwapA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceAvg\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"secondsAgo\",\"type\":\"uint32\"}],\"name\":\"consultTwapB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceAvg\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeDebtA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeDebtB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePerLPTokenA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePerLPTokenB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"priceACumulative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceBCumulative\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"observationsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"den\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Now mints/burns ERC20 LP tokens representing liquidity shares\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"params\":{\"_tokenA\":\"Address of first token\",\"_tokenB\":\"Address of second token\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"flashSwap(address,uint256,bytes)\":{\"params\":{\"amountOut\":\"Amount to borrow\",\"data\":\"Arbitrary data forwarded to receiver\",\"tokenOut\":\"Address of token to borrow (must be tokenA or tokenB)\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"title\":\"SimpleDEX\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(uint256,uint256)\":{\"notice\":\"Add liquidity to the pool and mint LP tokens\"},\"claimFees()\":{\"notice\":\"Claim accumulated fees for both tokens based on current LP balance\"},\"constructor\":{\"notice\":\"Constructor sets the token pair\"},\"consultTwapA(uint32)\":{\"notice\":\"TWAP over the last `secondsAgo` seconds for price of A in terms of B (1e18-scaled) Uses the last two observations as a simple approximation if window exceeds last interval.\"},\"consultTwapB(uint32)\":{\"notice\":\"TWAP over the last `secondsAgo` seconds for price of B in terms of A (1e18-scaled)\"},\"flashSwap(address,uint256,bytes)\":{\"notice\":\"Flash swap: borrow tokenOut, execute callback, and repay + fee within the same tx\"},\"getReserves()\":{\"notice\":\"Get current pool state\"},\"getSwapAmount(address,uint256)\":{\"notice\":\"Calculate swap output amount (view function)\"},\"getUserLiquidity(address)\":{\"notice\":\"Get user's liquidity position (LP balance and share bps)\"},\"observationsLength()\":{\"notice\":\"Number of observations stored\"},\"removeLiquidity(uint256)\":{\"notice\":\"Remove liquidity by burning LP tokens\"},\"swap(address,uint256,uint256)\":{\"notice\":\"Swap one token for another\"},\"totalLiquidity()\":{\"notice\":\"Backwards-compatibility view: totalLiquidity equals ERC20 totalSupply\"}},\"notice\":\"A simplified decentralized exchange using constant product AMM (x * y = k)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleDEX.sol\":\"SimpleDEX\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/SimpleDEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ninterface IFlashSwapReceiver {\\r\\n    function onFlashSwap(bytes calldata data) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SimpleDEX\\r\\n * @notice A simplified decentralized exchange using constant product AMM (x * y = k)\\r\\n * @dev Now mints/burns ERC20 LP tokens representing liquidity shares\\r\\n */\\r\\ncontract SimpleDEX is ERC20, ReentrancyGuard {\\r\\n    // Token addresses\\r\\n    IERC20 public immutable tokenA;\\r\\n    IERC20 public immutable tokenB;\\r\\n\\r\\n    // Pool reserves\\r\\n    uint256 public reserveA;\\r\\n    uint256 public reserveB;\\r\\n\\r\\n    // Optional legacy mapping for compatibility (mirrors LP balances)\\r\\n    mapping(address => uint256) public liquidity;\\r\\n\\r\\n    // --- Fee distribution accounting (claimable by LPs) ---\\r\\n    uint256 public feePerLPTokenA; // scaled by 1e18\\r\\n    uint256 public feePerLPTokenB; // scaled by 1e18\\r\\n    mapping(address => uint256) public feeDebtA; // user debt = balance * feePerLPTokenA / 1e18\\r\\n    mapping(address => uint256) public feeDebtB; // user debt = balance * feePerLPTokenB / 1e18\\r\\n\\r\\n    // Fee (mutable via governance). Defaults to 0.3% = 3/1000\\r\\n    uint256 public feeNumerator;\\r\\n    uint256 public feeDenominator;\\r\\n\\r\\n    // Governance address (expected to be a TimelockController). Only this can change parameters.\\r\\n    address public governance;\\r\\n\\r\\n    // --- TWAP ---\\r\\n    struct Observation {\\r\\n        uint32 timestamp;\\r\\n        uint256 priceACumulative; // price of A in terms of B, 1e18-scaled, integrated over time\\r\\n        uint256 priceBCumulative; // price of B in terms of A, 1e18-scaled, integrated over time\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernance() {\\r\\n        require(msg.sender == governance, \\\"not governance\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setGovernance(address _gov) external {\\r\\n        // Allow one-time initialization by anyone ONLY if governance not set yet; otherwise only current governance\\r\\n        if (governance != address(0)) {\\r\\n            require(msg.sender == governance, \\\"not governance\\\");\\r\\n        }\\r\\n        require(_gov != address(0), \\\"gov=0\\\");\\r\\n        governance = _gov;\\r\\n    }\\r\\n\\r\\n    function setFee(uint256 num, uint256 den) external onlyGovernance {\\r\\n        require(den > 0, \\\"den=0\\\");\\r\\n        // Safety cap: fee <= 1%\\r\\n        require(num * 100 <= den, \\\"fee too high\\\");\\r\\n        feeNumerator = num;\\r\\n        feeDenominator = den;\\r\\n    }\\r\\n    Observation[] public observations;\\r\\n\\r\\n    // Events\\r\\n    event LiquidityAdded(\\r\\n        address indexed provider,\\r\\n        uint256 amountA,\\r\\n        uint256 amountB,\\r\\n        uint256 liquidityMinted\\r\\n    );\\r\\n    event LiquidityRemoved(\\r\\n        address indexed provider,\\r\\n        uint256 amountA,\\r\\n        uint256 amountB,\\r\\n        uint256 liquidityBurned\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed user,\\r\\n        address indexed tokenIn,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut\\r\\n    );\\r\\n    event FlashSwap(address indexed user, address indexed token, uint256 amountOut, uint256 feePaid);\\r\\n\\r\\n    event FeesAccrued(address indexed token, uint256 feeAmount, uint256 feePerLPToken);\\r\\n    event FeesClaimed(address indexed user, uint256 amountA, uint256 amountB);\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor sets the token pair\\r\\n     * @param _tokenA Address of first token\\r\\n     * @param _tokenB Address of second token\\r\\n     */\\r\\n    constructor(address _tokenA, address _tokenB) ERC20(\\\"SimpleDEX LP\\\", \\\"SLP-LP\\\") {\\r\\n        require(_tokenA != address(0) && _tokenB != address(0), \\\"Invalid token address\\\");\\r\\n        require(_tokenA != _tokenB, \\\"Tokens must be different\\\");\\r\\n\\r\\n        tokenA = IERC20(_tokenA);\\r\\n        tokenB = IERC20(_tokenB);\\r\\n\\r\\n        // default fee 0.3%\\r\\n        feeNumerator = 3;\\r\\n        feeDenominator = 1000;\\r\\n\\r\\n        // Initialize observations with zero cumulatives\\r\\n        observations.push(Observation({\\r\\n            timestamp: uint32(block.timestamp),\\r\\n            priceACumulative: 0,\\r\\n            priceBCumulative: 0\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update cumulative price observations using current reserves.\\r\\n     * Accumulates time-weighted price since last observation.\\r\\n     */\\r\\n    function _updateCumulative() internal {\\r\\n        Observation storage lastObs = observations[observations.length - 1];\\r\\n        uint32 nowTs = uint32(block.timestamp);\\r\\n        if (nowTs == lastObs.timestamp) return;\\r\\n\\r\\n        uint256 priceA_1e18 = 0;\\r\\n        uint256 priceB_1e18 = 0;\\r\\n        if (reserveA > 0 && reserveB > 0) {\\r\\n            // priceA = B/A, priceB = A/B, both scaled by 1e18\\r\\n            priceA_1e18 = (reserveB * 1e18) / reserveA;\\r\\n            priceB_1e18 = (reserveA * 1e18) / reserveB;\\r\\n        }\\r\\n\\r\\n        uint256 timeElapsed = uint256(nowTs - lastObs.timestamp);\\r\\n        observations.push(Observation({\\r\\n            timestamp: nowTs,\\r\\n            priceACumulative: lastObs.priceACumulative + priceA_1e18 * timeElapsed,\\r\\n            priceBCumulative: lastObs.priceBCumulative + priceB_1e18 * timeElapsed\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add liquidity to the pool and mint LP tokens\\r\\n     */\\r\\n    function addLiquidity(uint256 amountA, uint256 amountB)\\r\\n        external\\r\\n        nonReentrant\\r\\n        returns (uint256 liquidityMinted)\\r\\n    {\\r\\n        // Accumulate TWAP with current reserves before changing state\\r\\n        _updateCumulative();\\r\\n        require(amountA > 0 && amountB > 0, \\\"Amounts must be greater than 0\\\");\\r\\n\\r\\n        // Transfer tokens from user to contract\\r\\n        tokenA.transferFrom(msg.sender, address(this), amountA);\\r\\n        tokenB.transferFrom(msg.sender, address(this), amountB);\\r\\n\\r\\n        uint256 _totalSupply = totalSupply();\\r\\n\\r\\n        // Calculate liquidity to mint (simple proportional model)\\r\\n        if (_totalSupply == 0) {\\r\\n            // First LP minter: simple seed (keep previous behavior)\\r\\n            liquidityMinted = amountA;\\r\\n        } else {\\r\\n            uint256 liquidityA = (amountA * _totalSupply) / reserveA;\\r\\n            uint256 liquidityB = (amountB * _totalSupply) / reserveB;\\r\\n            liquidityMinted = liquidityA < liquidityB ? liquidityA : liquidityB;\\r\\n        }\\r\\n\\r\\n        require(liquidityMinted > 0, \\\"Insufficient liquidity minted\\\");\\r\\n\\r\\n        // Mint LP\\r\\n        _mint(msg.sender, liquidityMinted);\\r\\n        liquidity[msg.sender] = balanceOf(msg.sender); // mirror for compatibility\\r\\n\\r\\n        // Update reserves\\r\\n        reserveA += amountA;\\r\\n        reserveB += amountB;\\r\\n\\r\\n        emit LiquidityAdded(msg.sender, amountA, amountB, liquidityMinted);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Remove liquidity by burning LP tokens\\r\\n     */\\r\\n    function removeLiquidity(uint256 liquidityAmount)\\r\\n        external\\r\\n        nonReentrant\\r\\n        returns (uint256 amountA, uint256 amountB)\\r\\n    {\\r\\n        // Accumulate TWAP with current reserves before changing state\\r\\n        _updateCumulative();\\r\\n        require(liquidityAmount > 0, \\\"Amount must be greater than 0\\\");\\r\\n        require(balanceOf(msg.sender) >= liquidityAmount, \\\"Insufficient liquidity\\\");\\r\\n\\r\\n        uint256 _totalSupply = totalSupply();\\r\\n        amountA = (liquidityAmount * reserveA) / _totalSupply;\\r\\n        amountB = (liquidityAmount * reserveB) / _totalSupply;\\r\\n\\r\\n        require(amountA > 0 && amountB > 0, \\\"Insufficient liquidity burned\\\");\\r\\n\\r\\n        // Burn LP\\r\\n        _burn(msg.sender, liquidityAmount);\\r\\n        liquidity[msg.sender] = balanceOf(msg.sender); // mirror for compatibility\\r\\n\\r\\n        // Update reserves\\r\\n        reserveA -= amountA;\\r\\n        reserveB -= amountB;\\r\\n\\r\\n        // Transfer tokens back to user\\r\\n        tokenA.transfer(msg.sender, amountA);\\r\\n        tokenB.transfer(msg.sender, amountB);\\r\\n\\r\\n        emit LiquidityRemoved(msg.sender, amountA, amountB, liquidityAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap one token for another\\r\\n     */\\r\\n    function swap(address tokenIn, uint256 amountIn, uint256 minAmountOut)\\r\\n        external\\r\\n        nonReentrant\\r\\n        returns (uint256 amountOut)\\r\\n    {\\r\\n        // Accumulate TWAP with current reserves before changing state\\r\\n        _updateCumulative();\\r\\n        require(amountIn > 0, \\\"Amount must be greater than 0\\\");\\r\\n        require(tokenIn == address(tokenA) || tokenIn == address(tokenB), \\\"Invalid token\\\");\\r\\n\\r\\n        bool isTokenA = tokenIn == address(tokenA);\\r\\n        (IERC20 tokenInContract, IERC20 tokenOutContract) = isTokenA ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        (uint256 reserveIn, uint256 reserveOut) = isTokenA ? (reserveA, reserveB) : (reserveB, reserveA);\\r\\n\\r\\n        tokenInContract.transferFrom(msg.sender, address(this), amountIn);\\r\\n\\r\\n        uint256 amountInWithFee = amountIn * (feeDenominator - feeNumerator);\\r\\n        uint256 numerator = amountInWithFee * reserveOut;\\r\\n        uint256 denominator = (reserveIn * feeDenominator) + amountInWithFee;\\r\\n        amountOut = numerator / denominator;\\r\\n\\r\\n        require(amountOut > 0, \\\"Insufficient output amount\\\");\\r\\n        require(amountOut < reserveOut, \\\"Insufficient liquidity\\\");\\r\\n        require(amountOut >= minAmountOut, \\\"Slippage exceeded\\\");\\r\\n\\r\\n        if (isTokenA) {\\r\\n            reserveA += amountIn;\\r\\n            reserveB -= amountOut;\\r\\n        } else {\\r\\n            reserveB += amountIn;\\r\\n            reserveA -= amountOut;\\r\\n        }\\r\\n\\r\\n        tokenOutContract.transfer(msg.sender, amountOut);\\r\\n\\r\\n        emit Swap(msg.sender, tokenIn, amountIn, amountOut);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Flash swap: borrow tokenOut, execute callback, and repay + fee within the same tx\\r\\n     * @param tokenOut Address of token to borrow (must be tokenA or tokenB)\\r\\n     * @param amountOut Amount to borrow\\r\\n     * @param data Arbitrary data forwarded to receiver\\r\\n     */\\r\\n    function flashSwap(address tokenOut, uint256 amountOut, bytes calldata data) external nonReentrant {\\r\\n        // Accumulate TWAP with current reserves before changing state\\r\\n        _updateCumulative();\\r\\n\\r\\n        require(amountOut > 0, \\\"amount=0\\\");\\r\\n        require(tokenOut == address(tokenA) || tokenOut == address(tokenB), \\\"Invalid token\\\");\\r\\n\\r\\n        IERC20 out = IERC20(tokenOut);\\r\\n        uint256 beforeBal = out.balanceOf(address(this));\\r\\n        require(beforeBal >= amountOut, \\\"insufficient liquidity\\\");\\r\\n\\r\\n        // Send tokens to borrower (msg.sender)\\r\\n        out.transfer(msg.sender, amountOut);\\r\\n\\r\\n        // Execute callback\\r\\n        IFlashSwapReceiver(msg.sender).onFlashSwap(data);\\r\\n\\r\\n        // Compute fee and verify repayment\\r\\n        uint256 fee = (amountOut * feeNumerator) / feeDenominator;\\r\\n        uint256 afterBal = out.balanceOf(address(this));\\r\\n        require(afterBal >= beforeBal + fee, \\\"Flash swap not repaid\\\");\\r\\n\\r\\n        // Accrue fee to reserves\\r\\n        if (tokenOut == address(tokenA)) {\\r\\n            reserveA += fee;\\r\\n        } else {\\r\\n            reserveB += fee;\\r\\n        }\\r\\n\\r\\n        // Update fee distribution indices so LPs can claim proportionally\\r\\n        uint256 ts = totalSupply();\\r\\n        if (ts > 0) {\\r\\n            if (tokenOut == address(tokenA)) {\\r\\n                feePerLPTokenA += (fee * 1e18) / ts;\\r\\n                emit FeesAccrued(address(tokenA), fee, feePerLPTokenA);\\r\\n            } else {\\r\\n                feePerLPTokenB += (fee * 1e18) / ts;\\r\\n                emit FeesAccrued(address(tokenB), fee, feePerLPTokenB);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit FlashSwap(msg.sender, tokenOut, amountOut, fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate swap output amount (view function)\\r\\n     */\\r\\n    function getSwapAmount(address tokenIn, uint256 amountIn) external view returns (uint256 amountOut) {\\r\\n        require(amountIn > 0, \\\"Amount must be greater than 0\\\");\\r\\n        require(tokenIn == address(tokenA) || tokenIn == address(tokenB), \\\"Invalid token\\\");\\r\\n\\r\\n        bool isTokenA = tokenIn == address(tokenA);\\r\\n        (uint256 reserveIn, uint256 reserveOut) = isTokenA ? (reserveA, reserveB) : (reserveB, reserveA);\\r\\n\\r\\n        uint256 amountInWithFee = amountIn * (feeDenominator - feeNumerator);\\r\\n        uint256 numerator = amountInWithFee * reserveOut;\\r\\n        uint256 denominator = (reserveIn * feeDenominator) + amountInWithFee;\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get current pool state\\r\\n     */\\r\\n    function getReserves() external view returns (uint256 _reserveA, uint256 _reserveB, uint256 _totalLiquidity) {\\r\\n        return (reserveA, reserveB, totalSupply());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get user's liquidity position (LP balance and share bps)\\r\\n     */\\r\\n    function getUserLiquidity(address user) external view returns (uint256 liquidityAmount, uint256 sharePercentage) {\\r\\n        liquidityAmount = balanceOf(user);\\r\\n        uint256 _totalSupply = totalSupply();\\r\\n        sharePercentage = _totalSupply > 0 ? (liquidityAmount * 10000) / _totalSupply : 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim accumulated fees for both tokens based on current LP balance\\r\\n     */\\r\\n    function claimFees() external nonReentrant returns (uint256 amountA, uint256 amountB) {\\r\\n        uint256 bal = balanceOf(msg.sender);\\r\\n        require(bal > 0, \\\"No LP balance\\\");\\r\\n\\r\\n        // Compute owed using index - debt model\\r\\n        uint256 accruedA = (bal * feePerLPTokenA) / 1e18;\\r\\n        uint256 accruedB = (bal * feePerLPTokenB) / 1e18;\\r\\n\\r\\n        amountA = accruedA - feeDebtA[msg.sender];\\r\\n        amountB = accruedB - feeDebtB[msg.sender];\\r\\n\\r\\n        require(amountA > 0 || amountB > 0, \\\"Nothing to claim\\\");\\r\\n\\r\\n        // Update debts to current index\\r\\n        feeDebtA[msg.sender] = accruedA;\\r\\n        feeDebtB[msg.sender] = accruedB;\\r\\n\\r\\n        // Pay out and adjust reserves\\r\\n        if (amountA > 0) {\\r\\n            require(reserveA >= amountA, \\\"Insufficient A reserve\\\");\\r\\n            reserveA -= amountA;\\r\\n            tokenA.transfer(msg.sender, amountA);\\r\\n        }\\r\\n        if (amountB > 0) {\\r\\n            require(reserveB >= amountB, \\\"Insufficient B reserve\\\");\\r\\n            reserveB -= amountB;\\r\\n            tokenB.transfer(msg.sender, amountB);\\r\\n        }\\r\\n\\r\\n        emit FeesClaimed(msg.sender, amountA, amountB);\\r\\n    }\\r\\n\\r\\n    function _updateFeeDebt(address account) internal {\\r\\n        if (account == address(0)) return;\\r\\n        uint256 bal = balanceOf(account);\\r\\n        feeDebtA[account] = (bal * feePerLPTokenA) / 1e18;\\r\\n        feeDebtB[account] = (bal * feePerLPTokenB) / 1e18;\\r\\n        liquidity[account] = bal; // keep legacy mirror in sync\\r\\n    }\\r\\n\\r\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal override {\\r\\n        super._afterTokenTransfer(from, to, amount);\\r\\n        if (from != address(0)) _updateFeeDebt(from);\\r\\n        if (to != address(0)) _updateFeeDebt(to);\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint256 amount) internal override {\\r\\n        super._mint(to, amount);\\r\\n        _updateFeeDebt(to);\\r\\n    }\\r\\n\\r\\n    function _burn(address from, uint256 amount) internal override {\\r\\n        super._burn(from, amount);\\r\\n        _updateFeeDebt(from);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Backwards-compatibility view: totalLiquidity equals ERC20 totalSupply\\r\\n     */\\r\\n    function totalLiquidity() external view returns (uint256) {\\r\\n        return totalSupply();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Number of observations stored\\r\\n     */\\r\\n    function observationsLength() external view returns (uint256) {\\r\\n        return observations.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice TWAP over the last `secondsAgo` seconds for price of A in terms of B (1e18-scaled)\\r\\n     * Uses the last two observations as a simple approximation if window exceeds last interval.\\r\\n     */\\r\\n    function consultTwapA(uint32 secondsAgo) external view returns (uint256 priceAvg) {\\r\\n        if (observations.length < 2 || secondsAgo == 0) return 0;\\r\\n        Observation memory lastObs = observations[observations.length - 1];\\r\\n        Observation memory prevObs = observations[observations.length - 2];\\r\\n        uint32 startTs = lastObs.timestamp > secondsAgo ? lastObs.timestamp - secondsAgo : prevObs.timestamp;\\r\\n        uint256 window = uint256(lastObs.timestamp - startTs);\\r\\n        if (window == 0) return 0;\\r\\n        // Use delta cumulatives over available window (approx using prevObs as baseline)\\r\\n        uint256 delta = lastObs.priceACumulative - prevObs.priceACumulative;\\r\\n        uint256 interval = uint256(lastObs.timestamp - prevObs.timestamp);\\r\\n        if (interval == 0) return 0;\\r\\n        // Average over requested window approximated by last interval average\\r\\n        uint256 avgLastInterval = delta / interval;\\r\\n        return avgLastInterval;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice TWAP over the last `secondsAgo` seconds for price of B in terms of A (1e18-scaled)\\r\\n     */\\r\\n    function consultTwapB(uint32 secondsAgo) external view returns (uint256 priceAvg) {\\r\\n        if (observations.length < 2 || secondsAgo == 0) return 0;\\r\\n        Observation memory lastObs = observations[observations.length - 1];\\r\\n        Observation memory prevObs = observations[observations.length - 2];\\r\\n        uint32 startTs = lastObs.timestamp > secondsAgo ? lastObs.timestamp - secondsAgo : prevObs.timestamp;\\r\\n        uint256 window = uint256(lastObs.timestamp - startTs);\\r\\n        if (window == 0) return 0;\\r\\n        uint256 delta = lastObs.priceBCumulative - prevObs.priceBCumulative;\\r\\n        uint256 interval = uint256(lastObs.timestamp - prevObs.timestamp);\\r\\n        if (interval == 0) return 0;\\r\\n        uint256 avgLastInterval = delta / interval;\\r\\n        return avgLastInterval;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x46ee66f2d75844e4f075dc1354dfdc596300233f349b8659129e097c6f474999\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620032653803806200326583398101604081905262000034916200026f565b6040518060400160405280600c81526020016b053696d706c65444558204c560a41b815250604051806040016040528060068152602001650534c502d4c560d41b81525081600390816200008991906200034c565b5060046200009882826200034c565b50506001600555506001600160a01b03821615801590620000c157506001600160a01b03811615155b620001135760405162461bcd60e51b815260206004820152601560248201527f496e76616c696420746f6b656e2061646472657373000000000000000000000060448201526064015b60405180910390fd5b806001600160a01b0316826001600160a01b031603620001765760405162461bcd60e51b815260206004820152601860248201527f546f6b656e73206d75737420626520646966666572656e74000000000000000060448201526064016200010a565b6001600160a01b039182166080521660a0526003600d8190556103e8600e556040805160608101825263ffffffff4281168252600060208301818152938301818152601080546001810182559252925194027f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672810180549590921663ffffffff1990951694909417905590517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae673830155517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6749091015562000418565b80516001600160a01b03811681146200026a57600080fd5b919050565b600080604083850312156200028357600080fd5b6200028e8362000252565b91506200029e6020840162000252565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620002d257607f821691505b602082108103620002f357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200034757600081815260208120601f850160051c81016020861015620003225750805b601f850160051c820191505b8181101562000343578281556001016200032e565b5050505b505050565b81516001600160401b03811115620003685762000368620002a7565b6200038081620003798454620002bd565b84620002f9565b602080601f831160018114620003b857600084156200039f5750858301515b600019600386901b1c1916600185901b17855562000343565b600085815260208120601f198616915b82811015620003e957888601518255948401946001909101908401620003c8565b5085821015620004085787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a051612d8d620004d8600039600081816103ec015281816106a90152818161089801528181610ce9015281816110ec015281816112dd01528181611520015281816115b30152818161161b0152611d560152600081816102b30152818161066e015281816106fd0152818161085d01528181610b4901528181610bca01528181610c440152818161105a01528181611245015281816114e501528181611574015281816115d4015281816115fa0152611c5b0152612d8d6000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c806370a0823111610130578063b8c876b1116100b8578063dc5fa6c51161007c578063dc5fa6c51461051c578063dd62ed3e14610525578063dd6c919514610538578063e86dea4a1461054b578063f113f6b81461055457600080fd5b8063b8c876b1146104d0578063c4c51355146104f0578063cd7f5ce2146104f9578063d294f09314610501578063dbbdd9351461050957600080fd5b80639cd441da116100ff5780639cd441da146104715780639f1d0f5914610484578063a457c2d714610497578063a9059cbb146104aa578063ab033ea9146104bd57600080fd5b806370a082311461040e57806393dd84561461042157806395d89b41146104415780639c8f9f231461044957600080fd5b80631befa6db116101be57806335100fa51161018257806335100fa51461038e57806339509351146103ae57806352f7c988146103c15780635aa6e675146103d45780635f64b55b146103e757600080fd5b80631befa6db1461030f57806323b872dd14610322578063252c09d7146103355780632f5576581461036a578063313ce5671461037f57600080fd5b80630fc63d10116102055780630fc63d10146102ae57806315770f92146102ed578063180b0d7e146102f557806318160ddd146102fe57806319e36f3b1461030657600080fd5b806303c90b291461023757806306fdde03146102535780630902f1ac14610268578063095ea7b31461028b575b600080fd5b61024060095481565b6040519081526020015b60405180910390f35b61025b610567565b60405161024a919061296d565b6102706105f9565b6040805193845260208401929092529082015260600161024a565b61029e6102993660046129d7565b610618565b604051901515815260200161024a565b6102d57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161024a565b610240610632565b610240600e5481565b600254610240565b61024060075481565b61024061031d3660046129d7565b610642565b61029e610330366004612a01565b6107b0565b610348610343366004612a3d565b6107d6565b6040805163ffffffff909416845260208401929092529082015260600161024a565b61037d610378366004612a56565b610810565b005b6040516012815260200161024a565b61024061039c366004612add565b600c6020526000908152604090205481565b61029e6103bc3660046129d7565b610da2565b61037d6103cf366004612af8565b610dc4565b600f546102d5906001600160a01b031681565b6102d57f000000000000000000000000000000000000000000000000000000000000000081565b61024061041c366004612add565b610e9b565b61024061042f366004612add565b600b6020526000908152604090205481565b61025b610eb6565b61045c610457366004612a3d565b610ec5565b6040805192835260208301919091520161024a565b61024061047f366004612af8565b6111b5565b610240610492366004612b1a565b6114b1565b61029e6104a53660046129d7565b61193e565b61029e6104b83660046129d7565b6119c4565b61037d6104cb366004612add565b6119d2565b6102406104de366004612add565b60086020526000908152604090205481565b610240600a5481565b601054610240565b61045c611a8e565b61045c610517366004612add565b611e19565b61024060065481565b610240610533366004612b4d565b611e62565b610240610546366004612b80565b611e8d565b610240600d5481565b610240610562366004612b80565b612017565b60606003805461057690612ba6565b80601f01602080910402602001604051908101604052809291908181526020018280546105a290612ba6565b80156105ef5780601f106105c4576101008083540402835291602001916105ef565b820191906000526020600020905b8154815290600101906020018083116105d257829003601f168201915b5050505050905090565b600080600060065460075461060d60025490565b925092509250909192565b600033610626818585612163565b60019150505b92915050565b600061063d60025490565b905090565b600080821161066c5760405162461bcd60e51b815260040161066390612be0565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614806106dd57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b6106f95760405162461bcd60e51b815260040161066390612c17565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316149050600080826107455760075460065461074c565b6006546007545b915091506000600d54600e546107629190612c54565b61076c9087612c67565b9050600061077a8383612c67565b9050600082600e548661078d9190612c67565b6107979190612c7e565b90506107a38183612c91565b9998505050505050505050565b6000336107be858285612287565b6107c98585856122fb565b60019150505b9392505050565b601081815481106107e657600080fd5b600091825260209091206003909102018054600182015460029092015463ffffffff909116925083565b6108186124a5565b6108206124fe565b6000831161085b5760405162461bcd60e51b81526020600482015260086024820152670616d6f756e743d360c41b6044820152606401610663565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031614806108cc57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b6108e85760405162461bcd60e51b815260040161066390612c17565b6040516370a0823160e01b815230600482015284906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610931573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109559190612cb3565b9050848110156109a05760405162461bcd60e51b8152602060048201526016602482015275696e73756666696369656e74206c697175696469747960501b6044820152606401610663565b60405163a9059cbb60e01b8152336004820152602481018690526001600160a01b0383169063a9059cbb906044016020604051808303816000875af11580156109ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a119190612ccc565b50604051634ea0d7e960e11b81523390639d41afd290610a379087908790600401612cee565b600060405180830381600087803b158015610a5157600080fd5b505af1158015610a65573d6000803e3d6000fd5b505050506000600e54600d5487610a7c9190612c67565b610a869190612c91565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa158015610ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af49190612cb3565b9050610b008284612c7e565b811015610b475760405162461bcd60e51b8152602060048201526015602482015274119b185cda081cddd85c081b9bdd081c995c185a59605a1b6044820152606401610663565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b031603610b9d578160066000828254610b929190612c7e565b90915550610bb59050565b8160076000828254610baf9190612c7e565b90915550505b6000610bc060025490565b90508015610d47577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316896001600160a01b031603610ca65780610c1484670de0b6b3a7640000612c67565b610c1e9190612c91565b60096000828254610c2f9190612c7e565b90915550506009546040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917fd2f36b7fd206a8b1cc41c911e5097cad7b212c0fdb230311dd2568194e7d9a5d91610c9991878252602082015260400190565b60405180910390a2610d47565b80610cb984670de0b6b3a7640000612c67565b610cc39190612c91565b600a6000828254610cd49190612c7e565b9091555050600a546040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917fd2f36b7fd206a8b1cc41c911e5097cad7b212c0fdb230311dd2568194e7d9a5d91610d3e91878252602082015260400190565b60405180910390a25b60408051898152602081018590526001600160a01b038b169133917f171da52ff7ddc9a897ca8fa62e9b6ae006a64ff3bdf2c3225096f3e303652258910160405180910390a35050505050610d9c6001600555565b50505050565b600033610626818585610db58383611e62565b610dbf9190612c7e565b612163565b600f546001600160a01b03163314610e0f5760405162461bcd60e51b815260206004820152600e60248201526d6e6f7420676f7665726e616e636560901b6044820152606401610663565b60008111610e475760405162461bcd60e51b8152602060048201526005602482015264064656e3d360dc1b6044820152606401610663565b80610e53836064612c67565b1115610e905760405162461bcd60e51b815260206004820152600c60248201526b0cccaca40e8dede40d0d2ced60a31b6044820152606401610663565b600d91909155600e55565b6001600160a01b031660009081526020819052604090205490565b60606004805461057690612ba6565b600080610ed06124a5565b610ed86124fe565b60008311610ef85760405162461bcd60e51b815260040161066390612be0565b82610f0233610e9b565b1015610f495760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b6044820152606401610663565b6000610f5460025490565b90508060065485610f659190612c67565b610f6f9190612c91565b92508060075485610f809190612c67565b610f8a9190612c91565b9150600083118015610f9c5750600082115b610fe85760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c6971756964697479206275726e65640000006044820152606401610663565b610ff23385612673565b610ffb33610e9b565b3360009081526008602052604081209190915560068054859290611020908490612c54565b9250508190555081600760008282546110399190612c54565b909155505060405163a9059cbb60e01b8152336004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af11580156110ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cf9190612ccc565b5060405163a9059cbb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561113d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111619190612ccc565b50604080518481526020810184905290810185905233907f1dc8bb69df2b8e91fbdcbfcf93d951b3f0000f085a95fe3f7946d6161439245d9060600160405180910390a2506111b06001600555565b915091565b60006111bf6124a5565b6111c76124fe565b6000831180156111d75750600082115b6112235760405162461bcd60e51b815260206004820152601e60248201527f416d6f756e7473206d7573742062652067726561746572207468616e203000006044820152606401610663565b6040516323b872dd60e01b8152336004820152306024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ba9190612ccc565b506040516323b872dd60e01b8152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af115801561132e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113529190612ccc565b50600061135e60025490565b905080600003611370578391506113bd565b6006546000906113808387612c67565b61138a9190612c91565b90506000600754838661139d9190612c67565b6113a79190612c91565b90508082106113b657806113b8565b815b935050505b6000821161140d5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c6971756964697479206d696e7465640000006044820152606401610663565b611417338361268a565b61142033610e9b565b3360009081526008602052604081209190915560068054869290611445908490612c7e565b92505081905550826007600082825461145e9190612c7e565b9091555050604080518581526020810185905290810183905233907f64b83944e79c3ce8d4c297411de637c3e102d064677aac0c163976ebdcd6f50e9060600160405180910390a25061062c6001600555565b60006114bb6124a5565b6114c36124fe565b600083116114e35760405162461bcd60e51b815260040161066390612be0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316148061155457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b6115705760405162461bcd60e51b815260040161066390612c17565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316149050600080826115f8577f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061163b565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000005b915091506000808461165257600754600654611659565b6006546007545b6040516323b872dd60e01b8152336004820152306024820152604481018b905291935091506001600160a01b038516906323b872dd906064016020604051808303816000875af11580156116b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d59190612ccc565b506000600d54600e546116e89190612c54565b6116f2908a612c67565b905060006117008383612c67565b9050600082600e54866117139190612c67565b61171d9190612c7e565b90506117298183612c91565b98506000891161177b5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74206f757470757420616d6f756e740000000000006044820152606401610663565b8389106117c35760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b6044820152606401610663565b898910156118075760405162461bcd60e51b815260206004820152601160248201527014db1a5c1c1859d948195e18d959591959607a1b6044820152606401610663565b8715611843578a6006600082825461181f9190612c7e565b9250508190555088600760008282546118389190612c54565b909155506118749050565b8a600760008282546118559190612c7e565b92505081905550886006600082825461186e9190612c54565b90915550505b60405163a9059cbb60e01b8152336004820152602481018a90526001600160a01b0387169063a9059cbb906044016020604051808303816000875af11580156118c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e59190612ccc565b50604080518c8152602081018b90526001600160a01b038e169133917ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe235910160405180910390a350505050505050506107cf6001600555565b6000338161194c8286611e62565b9050838110156119ac5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610663565b6119b98286868403612163565b506001949350505050565b6000336106268185856122fb565b600f546001600160a01b031615611a2e57600f546001600160a01b03163314611a2e5760405162461bcd60e51b815260206004820152600e60248201526d6e6f7420676f7665726e616e636560901b6044820152606401610663565b6001600160a01b038116611a6c5760405162461bcd60e51b81526020600482015260056024820152640676f763d360dc1b6044820152606401610663565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b600080611a996124a5565b6000611aa433610e9b565b905060008111611ae65760405162461bcd60e51b815260206004820152600d60248201526c4e6f204c502062616c616e636560981b6044820152606401610663565b6000670de0b6b3a764000060095483611aff9190612c67565b611b099190612c91565b90506000670de0b6b3a7640000600a5484611b249190612c67565b611b2e9190612c91565b336000908152600b6020526040902054909150611b4b9083612c54565b336000908152600c6020526040902054909550611b689082612c54565b93506000851180611b795750600084115b611bb85760405162461bcd60e51b815260206004820152601060248201526f4e6f7468696e6720746f20636c61696d60801b6044820152606401610663565b336000908152600b60209081526040808320859055600c90915290208190558415611cd257846006541015611c285760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e742041207265736572766560501b6044820152606401610663565b8460066000828254611c3a9190612c54565b909155505060405163a9059cbb60e01b8152336004820152602481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015611cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd09190612ccc565b505b8315611dcd57836007541015611d235760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e742042207265736572766560501b6044820152606401610663565b8360076000828254611d359190612c54565b909155505060405163a9059cbb60e01b8152336004820152602481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015611da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcb9190612ccc565b505b604080518681526020810186905233917f1ac537f0ad67b64ac68a04587ff3a4cb6977de22eb2c37ee560897a92c6d07c7910160405180910390a2505050611e156001600555565b9091565b600080611e2583610e9b565b91506000611e3260025490565b905060008111611e43576000611e5a565b80611e5084612710612c67565b611e5a9190612c91565b915050915091565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60105460009060021180611ea5575063ffffffff8216155b15611eb257506000919050565b6010805460009190611ec690600190612c54565b81548110611ed657611ed6612d1d565b60009182526020808320604080516060810182526003909402909101805463ffffffff168452600181015492840192909252600291820154908301526010805492945091611f249190612c54565b81548110611f3457611f34612d1d565b60009182526020808320604080516060810182526003909402909101805463ffffffff908116855260018201549385019390935260020154908301528451919350868116911611611f86578151611f93565b8251611f93908690612d33565b90506000818460000151611fa79190612d33565b63ffffffff16905080600003611fc35750600095945050505050565b600083602001518560200151611fd99190612c54565b84518651919250600091611fed9190612d33565b63ffffffff1690508060000361200b57506000979650505050505050565b60006107a38284612c91565b6010546000906002118061202f575063ffffffff8216155b1561203c57506000919050565b601080546000919061205090600190612c54565b8154811061206057612060612d1d565b60009182526020808320604080516060810182526003909402909101805463ffffffff1684526001810154928401929092526002918201549083015260108054929450916120ae9190612c54565b815481106120be576120be612d1d565b60009182526020808320604080516060810182526003909402909101805463ffffffff90811685526001820154938501939093526002015490830152845191935086811691161161211057815161211d565b825161211d908690612d33565b905060008184600001516121319190612d33565b63ffffffff1690508060000361214d5750600095945050505050565b600083604001518560400151611fd99190612c54565b6001600160a01b0383166121c55760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610663565b6001600160a01b0382166122265760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610663565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006122938484611e62565b90506000198114610d9c57818110156122ee5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610663565b610d9c8484848403612163565b6001600160a01b03831661235f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610663565b6001600160a01b0382166123c15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610663565b6001600160a01b038316600090815260208190526040902054818110156124395760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610663565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610d9c848484612699565b6002600554036124f75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610663565b6002600555565b601080546000919061251290600190612c54565b8154811061252257612522612d1d565b600091825260209091206003909102018054909150429063ffffffff9081169082160361254d575050565b600080600060065411801561256457506000600754115b156125b35760065460075461258190670de0b6b3a7640000612c67565b61258b9190612c91565b9150600754600654670de0b6b3a76400006125a69190612c67565b6125b09190612c91565b90505b83546000906125c89063ffffffff1685612d33565b63ffffffff169050601060405180606001604052808663ffffffff16815260200183866125f59190612c67565b88600101546126049190612c7e565b81526020016126138486612c67565b88600201546126229190612c7e565b905281546001808201845560009384526020938490208351600390930201805463ffffffff191663ffffffff9093169290921782559282015192810192909255604001516002909101555050505050565b61267d82826126c9565b61268682612802565b5050565b61267d82826128a6565b505050565b6001600160a01b038316156126b1576126b183612802565b6001600160a01b038216156126945761269482612802565b6001600160a01b0382166127295760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610663565b6001600160a01b0382166000908152602081905260409020548181101561279d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610663565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361269483600084612699565b6001600160a01b0381166128135750565b600061281e82610e9b565b9050670de0b6b3a7640000600954826128379190612c67565b6128419190612c91565b6001600160a01b0383166000908152600b6020526040902055600a54670de0b6b3a7640000906128719083612c67565b61287b9190612c91565b6001600160a01b039092166000908152600c6020908152604080832094909455600890529190912055565b6001600160a01b0382166128fc5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610663565b806002600082825461290e9190612c7e565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361268660008383612699565b600060208083528351808285015260005b8181101561299a5785810183015185820160400152820161297e565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146129d257600080fd5b919050565b600080604083850312156129ea57600080fd5b6129f3836129bb565b946020939093013593505050565b600080600060608486031215612a1657600080fd5b612a1f846129bb565b9250612a2d602085016129bb565b9150604084013590509250925092565b600060208284031215612a4f57600080fd5b5035919050565b60008060008060608587031215612a6c57600080fd5b612a75856129bb565b935060208501359250604085013567ffffffffffffffff80821115612a9957600080fd5b818701915087601f830112612aad57600080fd5b813581811115612abc57600080fd5b886020828501011115612ace57600080fd5b95989497505060200194505050565b600060208284031215612aef57600080fd5b6107cf826129bb565b60008060408385031215612b0b57600080fd5b50508035926020909101359150565b600080600060608486031215612b2f57600080fd5b612b38846129bb565b95602085013595506040909401359392505050565b60008060408385031215612b6057600080fd5b612b69836129bb565b9150612b77602084016129bb565b90509250929050565b600060208284031215612b9257600080fd5b813563ffffffff811681146107cf57600080fd5b600181811c90821680612bba57607f821691505b602082108103612bda57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601d908201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604082015260600190565b6020808252600d908201526c24b73b30b634b2103a37b5b2b760991b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561062c5761062c612c3e565b808202811582820484141761062c5761062c612c3e565b8082018082111561062c5761062c612c3e565b600082612cae57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612cc557600080fd5b5051919050565b600060208284031215612cde57600080fd5b815180151581146107cf57600080fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052603260045260246000fd5b63ffffffff828116828216039080821115612d5057612d50612c3e565b509291505056fea2646970667358221220422ef43888c92cccfe8c9a0f57c00153a86d8031ad1338938bfc5a1d92804b9564736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102325760003560e01c806370a0823111610130578063b8c876b1116100b8578063dc5fa6c51161007c578063dc5fa6c51461051c578063dd62ed3e14610525578063dd6c919514610538578063e86dea4a1461054b578063f113f6b81461055457600080fd5b8063b8c876b1146104d0578063c4c51355146104f0578063cd7f5ce2146104f9578063d294f09314610501578063dbbdd9351461050957600080fd5b80639cd441da116100ff5780639cd441da146104715780639f1d0f5914610484578063a457c2d714610497578063a9059cbb146104aa578063ab033ea9146104bd57600080fd5b806370a082311461040e57806393dd84561461042157806395d89b41146104415780639c8f9f231461044957600080fd5b80631befa6db116101be57806335100fa51161018257806335100fa51461038e57806339509351146103ae57806352f7c988146103c15780635aa6e675146103d45780635f64b55b146103e757600080fd5b80631befa6db1461030f57806323b872dd14610322578063252c09d7146103355780632f5576581461036a578063313ce5671461037f57600080fd5b80630fc63d10116102055780630fc63d10146102ae57806315770f92146102ed578063180b0d7e146102f557806318160ddd146102fe57806319e36f3b1461030657600080fd5b806303c90b291461023757806306fdde03146102535780630902f1ac14610268578063095ea7b31461028b575b600080fd5b61024060095481565b6040519081526020015b60405180910390f35b61025b610567565b60405161024a919061296d565b6102706105f9565b6040805193845260208401929092529082015260600161024a565b61029e6102993660046129d7565b610618565b604051901515815260200161024a565b6102d57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161024a565b610240610632565b610240600e5481565b600254610240565b61024060075481565b61024061031d3660046129d7565b610642565b61029e610330366004612a01565b6107b0565b610348610343366004612a3d565b6107d6565b6040805163ffffffff909416845260208401929092529082015260600161024a565b61037d610378366004612a56565b610810565b005b6040516012815260200161024a565b61024061039c366004612add565b600c6020526000908152604090205481565b61029e6103bc3660046129d7565b610da2565b61037d6103cf366004612af8565b610dc4565b600f546102d5906001600160a01b031681565b6102d57f000000000000000000000000000000000000000000000000000000000000000081565b61024061041c366004612add565b610e9b565b61024061042f366004612add565b600b6020526000908152604090205481565b61025b610eb6565b61045c610457366004612a3d565b610ec5565b6040805192835260208301919091520161024a565b61024061047f366004612af8565b6111b5565b610240610492366004612b1a565b6114b1565b61029e6104a53660046129d7565b61193e565b61029e6104b83660046129d7565b6119c4565b61037d6104cb366004612add565b6119d2565b6102406104de366004612add565b60086020526000908152604090205481565b610240600a5481565b601054610240565b61045c611a8e565b61045c610517366004612add565b611e19565b61024060065481565b610240610533366004612b4d565b611e62565b610240610546366004612b80565b611e8d565b610240600d5481565b610240610562366004612b80565b612017565b60606003805461057690612ba6565b80601f01602080910402602001604051908101604052809291908181526020018280546105a290612ba6565b80156105ef5780601f106105c4576101008083540402835291602001916105ef565b820191906000526020600020905b8154815290600101906020018083116105d257829003601f168201915b5050505050905090565b600080600060065460075461060d60025490565b925092509250909192565b600033610626818585612163565b60019150505b92915050565b600061063d60025490565b905090565b600080821161066c5760405162461bcd60e51b815260040161066390612be0565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614806106dd57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b6106f95760405162461bcd60e51b815260040161066390612c17565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316149050600080826107455760075460065461074c565b6006546007545b915091506000600d54600e546107629190612c54565b61076c9087612c67565b9050600061077a8383612c67565b9050600082600e548661078d9190612c67565b6107979190612c7e565b90506107a38183612c91565b9998505050505050505050565b6000336107be858285612287565b6107c98585856122fb565b60019150505b9392505050565b601081815481106107e657600080fd5b600091825260209091206003909102018054600182015460029092015463ffffffff909116925083565b6108186124a5565b6108206124fe565b6000831161085b5760405162461bcd60e51b81526020600482015260086024820152670616d6f756e743d360c41b6044820152606401610663565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031614806108cc57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b6108e85760405162461bcd60e51b815260040161066390612c17565b6040516370a0823160e01b815230600482015284906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610931573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109559190612cb3565b9050848110156109a05760405162461bcd60e51b8152602060048201526016602482015275696e73756666696369656e74206c697175696469747960501b6044820152606401610663565b60405163a9059cbb60e01b8152336004820152602481018690526001600160a01b0383169063a9059cbb906044016020604051808303816000875af11580156109ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a119190612ccc565b50604051634ea0d7e960e11b81523390639d41afd290610a379087908790600401612cee565b600060405180830381600087803b158015610a5157600080fd5b505af1158015610a65573d6000803e3d6000fd5b505050506000600e54600d5487610a7c9190612c67565b610a869190612c91565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa158015610ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af49190612cb3565b9050610b008284612c7e565b811015610b475760405162461bcd60e51b8152602060048201526015602482015274119b185cda081cddd85c081b9bdd081c995c185a59605a1b6044820152606401610663565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b031603610b9d578160066000828254610b929190612c7e565b90915550610bb59050565b8160076000828254610baf9190612c7e565b90915550505b6000610bc060025490565b90508015610d47577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316896001600160a01b031603610ca65780610c1484670de0b6b3a7640000612c67565b610c1e9190612c91565b60096000828254610c2f9190612c7e565b90915550506009546040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917fd2f36b7fd206a8b1cc41c911e5097cad7b212c0fdb230311dd2568194e7d9a5d91610c9991878252602082015260400190565b60405180910390a2610d47565b80610cb984670de0b6b3a7640000612c67565b610cc39190612c91565b600a6000828254610cd49190612c7e565b9091555050600a546040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917fd2f36b7fd206a8b1cc41c911e5097cad7b212c0fdb230311dd2568194e7d9a5d91610d3e91878252602082015260400190565b60405180910390a25b60408051898152602081018590526001600160a01b038b169133917f171da52ff7ddc9a897ca8fa62e9b6ae006a64ff3bdf2c3225096f3e303652258910160405180910390a35050505050610d9c6001600555565b50505050565b600033610626818585610db58383611e62565b610dbf9190612c7e565b612163565b600f546001600160a01b03163314610e0f5760405162461bcd60e51b815260206004820152600e60248201526d6e6f7420676f7665726e616e636560901b6044820152606401610663565b60008111610e475760405162461bcd60e51b8152602060048201526005602482015264064656e3d360dc1b6044820152606401610663565b80610e53836064612c67565b1115610e905760405162461bcd60e51b815260206004820152600c60248201526b0cccaca40e8dede40d0d2ced60a31b6044820152606401610663565b600d91909155600e55565b6001600160a01b031660009081526020819052604090205490565b60606004805461057690612ba6565b600080610ed06124a5565b610ed86124fe565b60008311610ef85760405162461bcd60e51b815260040161066390612be0565b82610f0233610e9b565b1015610f495760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b6044820152606401610663565b6000610f5460025490565b90508060065485610f659190612c67565b610f6f9190612c91565b92508060075485610f809190612c67565b610f8a9190612c91565b9150600083118015610f9c5750600082115b610fe85760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c6971756964697479206275726e65640000006044820152606401610663565b610ff23385612673565b610ffb33610e9b565b3360009081526008602052604081209190915560068054859290611020908490612c54565b9250508190555081600760008282546110399190612c54565b909155505060405163a9059cbb60e01b8152336004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af11580156110ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cf9190612ccc565b5060405163a9059cbb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561113d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111619190612ccc565b50604080518481526020810184905290810185905233907f1dc8bb69df2b8e91fbdcbfcf93d951b3f0000f085a95fe3f7946d6161439245d9060600160405180910390a2506111b06001600555565b915091565b60006111bf6124a5565b6111c76124fe565b6000831180156111d75750600082115b6112235760405162461bcd60e51b815260206004820152601e60248201527f416d6f756e7473206d7573742062652067726561746572207468616e203000006044820152606401610663565b6040516323b872dd60e01b8152336004820152306024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ba9190612ccc565b506040516323b872dd60e01b8152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af115801561132e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113529190612ccc565b50600061135e60025490565b905080600003611370578391506113bd565b6006546000906113808387612c67565b61138a9190612c91565b90506000600754838661139d9190612c67565b6113a79190612c91565b90508082106113b657806113b8565b815b935050505b6000821161140d5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c6971756964697479206d696e7465640000006044820152606401610663565b611417338361268a565b61142033610e9b565b3360009081526008602052604081209190915560068054869290611445908490612c7e565b92505081905550826007600082825461145e9190612c7e565b9091555050604080518581526020810185905290810183905233907f64b83944e79c3ce8d4c297411de637c3e102d064677aac0c163976ebdcd6f50e9060600160405180910390a25061062c6001600555565b60006114bb6124a5565b6114c36124fe565b600083116114e35760405162461bcd60e51b815260040161066390612be0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316148061155457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b6115705760405162461bcd60e51b815260040161066390612c17565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316149050600080826115f8577f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061163b565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000005b915091506000808461165257600754600654611659565b6006546007545b6040516323b872dd60e01b8152336004820152306024820152604481018b905291935091506001600160a01b038516906323b872dd906064016020604051808303816000875af11580156116b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d59190612ccc565b506000600d54600e546116e89190612c54565b6116f2908a612c67565b905060006117008383612c67565b9050600082600e54866117139190612c67565b61171d9190612c7e565b90506117298183612c91565b98506000891161177b5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74206f757470757420616d6f756e740000000000006044820152606401610663565b8389106117c35760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b6044820152606401610663565b898910156118075760405162461bcd60e51b815260206004820152601160248201527014db1a5c1c1859d948195e18d959591959607a1b6044820152606401610663565b8715611843578a6006600082825461181f9190612c7e565b9250508190555088600760008282546118389190612c54565b909155506118749050565b8a600760008282546118559190612c7e565b92505081905550886006600082825461186e9190612c54565b90915550505b60405163a9059cbb60e01b8152336004820152602481018a90526001600160a01b0387169063a9059cbb906044016020604051808303816000875af11580156118c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e59190612ccc565b50604080518c8152602081018b90526001600160a01b038e169133917ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe235910160405180910390a350505050505050506107cf6001600555565b6000338161194c8286611e62565b9050838110156119ac5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610663565b6119b98286868403612163565b506001949350505050565b6000336106268185856122fb565b600f546001600160a01b031615611a2e57600f546001600160a01b03163314611a2e5760405162461bcd60e51b815260206004820152600e60248201526d6e6f7420676f7665726e616e636560901b6044820152606401610663565b6001600160a01b038116611a6c5760405162461bcd60e51b81526020600482015260056024820152640676f763d360dc1b6044820152606401610663565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b600080611a996124a5565b6000611aa433610e9b565b905060008111611ae65760405162461bcd60e51b815260206004820152600d60248201526c4e6f204c502062616c616e636560981b6044820152606401610663565b6000670de0b6b3a764000060095483611aff9190612c67565b611b099190612c91565b90506000670de0b6b3a7640000600a5484611b249190612c67565b611b2e9190612c91565b336000908152600b6020526040902054909150611b4b9083612c54565b336000908152600c6020526040902054909550611b689082612c54565b93506000851180611b795750600084115b611bb85760405162461bcd60e51b815260206004820152601060248201526f4e6f7468696e6720746f20636c61696d60801b6044820152606401610663565b336000908152600b60209081526040808320859055600c90915290208190558415611cd257846006541015611c285760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e742041207265736572766560501b6044820152606401610663565b8460066000828254611c3a9190612c54565b909155505060405163a9059cbb60e01b8152336004820152602481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015611cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd09190612ccc565b505b8315611dcd57836007541015611d235760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e742042207265736572766560501b6044820152606401610663565b8360076000828254611d359190612c54565b909155505060405163a9059cbb60e01b8152336004820152602481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015611da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcb9190612ccc565b505b604080518681526020810186905233917f1ac537f0ad67b64ac68a04587ff3a4cb6977de22eb2c37ee560897a92c6d07c7910160405180910390a2505050611e156001600555565b9091565b600080611e2583610e9b565b91506000611e3260025490565b905060008111611e43576000611e5a565b80611e5084612710612c67565b611e5a9190612c91565b915050915091565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60105460009060021180611ea5575063ffffffff8216155b15611eb257506000919050565b6010805460009190611ec690600190612c54565b81548110611ed657611ed6612d1d565b60009182526020808320604080516060810182526003909402909101805463ffffffff168452600181015492840192909252600291820154908301526010805492945091611f249190612c54565b81548110611f3457611f34612d1d565b60009182526020808320604080516060810182526003909402909101805463ffffffff908116855260018201549385019390935260020154908301528451919350868116911611611f86578151611f93565b8251611f93908690612d33565b90506000818460000151611fa79190612d33565b63ffffffff16905080600003611fc35750600095945050505050565b600083602001518560200151611fd99190612c54565b84518651919250600091611fed9190612d33565b63ffffffff1690508060000361200b57506000979650505050505050565b60006107a38284612c91565b6010546000906002118061202f575063ffffffff8216155b1561203c57506000919050565b601080546000919061205090600190612c54565b8154811061206057612060612d1d565b60009182526020808320604080516060810182526003909402909101805463ffffffff1684526001810154928401929092526002918201549083015260108054929450916120ae9190612c54565b815481106120be576120be612d1d565b60009182526020808320604080516060810182526003909402909101805463ffffffff90811685526001820154938501939093526002015490830152845191935086811691161161211057815161211d565b825161211d908690612d33565b905060008184600001516121319190612d33565b63ffffffff1690508060000361214d5750600095945050505050565b600083604001518560400151611fd99190612c54565b6001600160a01b0383166121c55760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610663565b6001600160a01b0382166122265760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610663565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006122938484611e62565b90506000198114610d9c57818110156122ee5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610663565b610d9c8484848403612163565b6001600160a01b03831661235f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610663565b6001600160a01b0382166123c15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610663565b6001600160a01b038316600090815260208190526040902054818110156124395760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610663565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610d9c848484612699565b6002600554036124f75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610663565b6002600555565b601080546000919061251290600190612c54565b8154811061252257612522612d1d565b600091825260209091206003909102018054909150429063ffffffff9081169082160361254d575050565b600080600060065411801561256457506000600754115b156125b35760065460075461258190670de0b6b3a7640000612c67565b61258b9190612c91565b9150600754600654670de0b6b3a76400006125a69190612c67565b6125b09190612c91565b90505b83546000906125c89063ffffffff1685612d33565b63ffffffff169050601060405180606001604052808663ffffffff16815260200183866125f59190612c67565b88600101546126049190612c7e565b81526020016126138486612c67565b88600201546126229190612c7e565b905281546001808201845560009384526020938490208351600390930201805463ffffffff191663ffffffff9093169290921782559282015192810192909255604001516002909101555050505050565b61267d82826126c9565b61268682612802565b5050565b61267d82826128a6565b505050565b6001600160a01b038316156126b1576126b183612802565b6001600160a01b038216156126945761269482612802565b6001600160a01b0382166127295760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610663565b6001600160a01b0382166000908152602081905260409020548181101561279d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610663565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361269483600084612699565b6001600160a01b0381166128135750565b600061281e82610e9b565b9050670de0b6b3a7640000600954826128379190612c67565b6128419190612c91565b6001600160a01b0383166000908152600b6020526040902055600a54670de0b6b3a7640000906128719083612c67565b61287b9190612c91565b6001600160a01b039092166000908152600c6020908152604080832094909455600890529190912055565b6001600160a01b0382166128fc5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610663565b806002600082825461290e9190612c7e565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361268660008383612699565b600060208083528351808285015260005b8181101561299a5785810183015185820160400152820161297e565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146129d257600080fd5b919050565b600080604083850312156129ea57600080fd5b6129f3836129bb565b946020939093013593505050565b600080600060608486031215612a1657600080fd5b612a1f846129bb565b9250612a2d602085016129bb565b9150604084013590509250925092565b600060208284031215612a4f57600080fd5b5035919050565b60008060008060608587031215612a6c57600080fd5b612a75856129bb565b935060208501359250604085013567ffffffffffffffff80821115612a9957600080fd5b818701915087601f830112612aad57600080fd5b813581811115612abc57600080fd5b886020828501011115612ace57600080fd5b95989497505060200194505050565b600060208284031215612aef57600080fd5b6107cf826129bb565b60008060408385031215612b0b57600080fd5b50508035926020909101359150565b600080600060608486031215612b2f57600080fd5b612b38846129bb565b95602085013595506040909401359392505050565b60008060408385031215612b6057600080fd5b612b69836129bb565b9150612b77602084016129bb565b90509250929050565b600060208284031215612b9257600080fd5b813563ffffffff811681146107cf57600080fd5b600181811c90821680612bba57607f821691505b602082108103612bda57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601d908201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604082015260600190565b6020808252600d908201526c24b73b30b634b2103a37b5b2b760991b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561062c5761062c612c3e565b808202811582820484141761062c5761062c612c3e565b8082018082111561062c5761062c612c3e565b600082612cae57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612cc557600080fd5b5051919050565b600060208284031215612cde57600080fd5b815180151581146107cf57600080fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052603260045260246000fd5b63ffffffff828116828216039080821115612d5057612d50612c3e565b509291505056fea2646970667358221220422ef43888c92cccfe8c9a0f57c00153a86d8031ad1338938bfc5a1d92804b9564736f6c63430008110033",
  "devdoc": {
    "details": "Now mints/burns ERC20 LP tokens representing liquidity shares",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "params": {
          "_tokenA": "Address of first token",
          "_tokenB": "Address of second token"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "flashSwap(address,uint256,bytes)": {
        "params": {
          "amountOut": "Amount to borrow",
          "data": "Arbitrary data forwarded to receiver",
          "tokenOut": "Address of token to borrow (must be tokenA or tokenB)"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "title": "SimpleDEX",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(uint256,uint256)": {
        "notice": "Add liquidity to the pool and mint LP tokens"
      },
      "claimFees()": {
        "notice": "Claim accumulated fees for both tokens based on current LP balance"
      },
      "constructor": {
        "notice": "Constructor sets the token pair"
      },
      "consultTwapA(uint32)": {
        "notice": "TWAP over the last `secondsAgo` seconds for price of A in terms of B (1e18-scaled) Uses the last two observations as a simple approximation if window exceeds last interval."
      },
      "consultTwapB(uint32)": {
        "notice": "TWAP over the last `secondsAgo` seconds for price of B in terms of A (1e18-scaled)"
      },
      "flashSwap(address,uint256,bytes)": {
        "notice": "Flash swap: borrow tokenOut, execute callback, and repay + fee within the same tx"
      },
      "getReserves()": {
        "notice": "Get current pool state"
      },
      "getSwapAmount(address,uint256)": {
        "notice": "Calculate swap output amount (view function)"
      },
      "getUserLiquidity(address)": {
        "notice": "Get user's liquidity position (LP balance and share bps)"
      },
      "observationsLength()": {
        "notice": "Number of observations stored"
      },
      "removeLiquidity(uint256)": {
        "notice": "Remove liquidity by burning LP tokens"
      },
      "swap(address,uint256,uint256)": {
        "notice": "Swap one token for another"
      },
      "totalLiquidity()": {
        "notice": "Backwards-compatibility view: totalLiquidity equals ERC20 totalSupply"
      }
    },
    "notice": "A simplified decentralized exchange using constant product AMM (x * y = k)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 320,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 326,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 328,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 330,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 332,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 250,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5899,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "reserveA",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5901,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "reserveB",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5905,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "liquidity",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5907,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "feePerLPTokenA",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5909,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "feePerLPTokenB",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5913,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "feeDebtA",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5917,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "feeDebtB",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5919,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "feeNumerator",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5921,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "feeDenominator",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5923,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "governance",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 6016,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "observations",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_struct(Observation)5930_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Observation)5930_storage)dyn_storage": {
        "base": "t_struct(Observation)5930_storage",
        "encoding": "dynamic_array",
        "label": "struct SimpleDEX.Observation[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Observation)5930_storage": {
        "encoding": "inplace",
        "label": "struct SimpleDEX.Observation",
        "members": [
          {
            "astId": 5925,
            "contract": "contracts/SimpleDEX.sol:SimpleDEX",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5927,
            "contract": "contracts/SimpleDEX.sol:SimpleDEX",
            "label": "priceACumulative",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5929,
            "contract": "contracts/SimpleDEX.sol:SimpleDEX",
            "label": "priceBCumulative",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}