{
  "address": "0x0aB272ABd3e5C78D591960873eA94Ffa2bAadD87",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IDEXFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaebd9cd826b73614e9a08ddbdf9d82d247b6ce534447eb0d62af718540f143e4",
  "receipt": {
    "to": null,
    "from": "0x2A1Bc0c9C69C8C460E531C859d0c503bB1274083",
    "contractAddress": "0x0aB272ABd3e5C78D591960873eA94Ffa2bAadD87",
    "transactionIndex": 1,
    "gasUsed": "708091",
    "logsBloom": "0x
    "blockHash": "0xac61850219e67e0bb3fe9838e997393c49ce9707790664f9658a2e040b9d630e",
    "transactionHash": "0xaebd9cd826b73614e9a08ddbdf9d82d247b6ce534447eb0d62af718540f143e4",
    "logs": [],
    "blockNumber": 27871074,
    "cumulativeGasUsed": "754199",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9ECDBA85251368146dB07827b5708e6D77d43800"
  ],
  "numDeployments": 2,
  "solcInputHash": "0b93b10da3f1073800aee534eb3ff959",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IDEXFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"swapExactTokensForTokens(uint256,uint256,address[],address)\":{\"params\":{\"amountIn\":\"Input amount of path[0]\",\"minAmountOut\":\"Minimum acceptable output for the final token\",\"path\":\"Array of token addresses (e.g., [TokenA, TokenB, TokenC])\",\"to\":\"Recipient of final output tokens\"}}},\"title\":\"DEXRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swapExactTokensForTokens(uint256,uint256,address[],address)\":{\"notice\":\"Swap exact tokens across a path of pairs. Caller must approve the router for amountIn of path[0].\"}},\"notice\":\"Simple router to execute multi-hop swaps across SimpleDEX pairs created by DEXFactory\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DEXRouter.sol\":\"DEXRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DEXRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface ISimpleDEX {\\n    function tokenA() external view returns (address);\\n    function tokenB() external view returns (address);\\n    function getSwapAmount(address tokenIn, uint256 amountIn) external view returns (uint256 amountOut);\\n    function swap(address tokenIn, uint256 amountIn, uint256 minAmountOut) external returns (uint256 amountOut);\\n}\\n\\ninterface IERC20Minimal {\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n    function approve(address spender, uint256 value) external returns (bool);\\n}\\n\\ninterface IDEXFactory {\\n    function getPair(address tokenA, address tokenB) external view returns (address);\\n}\\n\\n/**\\n * @title DEXRouter\\n * @notice Simple router to execute multi-hop swaps across SimpleDEX pairs created by DEXFactory\\n */\\ncontract DEXRouter {\\n    IDEXFactory public immutable factory;\\n\\n    constructor(address _factory) {\\n        require(_factory != address(0), \\\"factory=0\\\");\\n        factory = IDEXFactory(_factory);\\n    }\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) public view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"path too short\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            address pair = factory.getPair(path[i], path[i + 1]);\\n            require(pair != address(0), \\\"pair missing\\\");\\n            amounts[i + 1] = ISimpleDEX(pair).getSwapAmount(path[i], amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Swap exact tokens across a path of pairs. Caller must approve the router for amountIn of path[0].\\n     * @param amountIn Input amount of path[0]\\n     * @param minAmountOut Minimum acceptable output for the final token\\n     * @param path Array of token addresses (e.g., [TokenA, TokenB, TokenC])\\n     * @param to Recipient of final output tokens\\n     */\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address[] calldata path,\\n        address to\\n    ) external returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"path too short\\\");\\n        require(to != address(0), \\\"to=0\\\");\\n\\n        // Pull input tokens from user\\n        require(IERC20Minimal(path[0]).transferFrom(msg.sender, address(this), amountIn), \\\"pull fail\\\");\\n\\n        // Precompute expected amounts for slippage protection\\n        amounts = getAmountsOut(amountIn, path);\\n        require(amounts[amounts.length - 1] >= minAmountOut, \\\"slippage\\\");\\n\\n        uint256 currentAmount = amountIn;\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            address tokenIn = path[i];\\n            address tokenOut = path[i + 1];\\n            address pair = factory.getPair(tokenIn, tokenOut);\\n            require(pair != address(0), \\\"pair missing\\\");\\n\\n            // Approve pair to pull tokens from router for this hop\\n            require(IERC20Minimal(tokenIn).approve(pair, currentAmount), \\\"approve fail\\\");\\n\\n            // For intermediate hops, minOut = 0, for final hop enforce minAmountOut\\n            uint256 hopMinOut = (i == path.length - 2) ? minAmountOut : 0;\\n            uint256 received = ISimpleDEX(pair).swap(tokenIn, currentAmount, hopMinOut);\\n            currentAmount = received; // router receives outputs from pair\\n        }\\n\\n        // Transfer final tokens to recipient\\n        require(IERC20Minimal(path[path.length - 1]).transfer(to, currentAmount), \\\"send fail\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6f6ba768a567a72cb906cbd5e84f99127821b69e87cea0b4bc080e0554f9185f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610caa380380610caa83398101604081905261002f91610086565b6001600160a01b0381166100755760405162461bcd60e51b81526020600482015260096024820152680666163746f72793d360bc1b604482015260640160405180910390fd5b6001600160a01b03166080526100b6565b60006020828403121561009857600080fd5b81516001600160a01b03811681146100af57600080fd5b9392505050565b608051610bcc6100de6000396000818160740152818161033101526106f50152610bcc6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063472b43f314610046578063c45a01551461006f578063d06ca61f146100ae575b600080fd5b610059610054366004610998565b6100c1565b6040516100669190610a03565b60405180910390f35b6100967f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610066565b6100596100bc366004610a47565b610633565b6060600283101561010a5760405162461bcd60e51b815260206004820152600e60248201526d1c185d1a081d1bdbc81cda1bdc9d60921b60448201526064015b60405180910390fd5b6001600160a01b0382166101495760405162461bcd60e51b8152600401610101906020808252600490820152630746f3d360e41b604082015260600190565b8383600081811061015c5761015c610a93565b90506020020160208101906101719190610aa9565b6040516323b872dd60e01b8152336004820152306024820152604481018890526001600160a01b0391909116906323b872dd906064016020604051808303816000875af11580156101c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ea9190610acd565b6102225760405162461bcd60e51b81526020600482015260096024820152681c1d5b1b0819985a5b60ba1b6044820152606401610101565b61022d868585610633565b905084816001835161023f9190610b05565b8151811061024f5761024f610a93565b602002602001015110156102905760405162461bcd60e51b8152602060048201526008602482015267736c69707061676560c01b6044820152606401610101565b8560005b61029f600186610b05565b81101561054a5760008686838181106102ba576102ba610a93565b90506020020160208101906102cf9190610aa9565b9050600087876102e0856001610b1e565b8181106102ef576102ef610a93565b90506020020160208101906103049190610aa9565b60405163e6a4390560e01b81526001600160a01b03848116600483015280831660248301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063e6a4390590604401602060405180830381865afa158015610378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039c9190610b31565b90506001600160a01b0381166103e35760405162461bcd60e51b815260206004820152600c60248201526b70616972206d697373696e6760a01b6044820152606401610101565b60405163095ea7b360e01b81526001600160a01b0382811660048301526024820187905284169063095ea7b3906044016020604051808303816000875af1158015610432573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104569190610acd565b6104915760405162461bcd60e51b815260206004820152600c60248201526b185c1c1c9bdd994819985a5b60a21b6044820152606401610101565b600061049e60028a610b05565b85146104ab5760006104ad565b8a5b604051639f1d0f5960e01b81526001600160a01b0386811660048301526024820189905260448201839052919250600091841690639f1d0f59906064016020604051808303816000875af1158015610509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052d9190610b4e565b90508096505050505050808061054290610b67565b915050610294565b508484610558600182610b05565b81811061056757610567610a93565b905060200201602081019061057c9190610aa9565b60405163a9059cbb60e01b81526001600160a01b03858116600483015260248201849052919091169063a9059cbb906044016020604051808303816000875af11580156105cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f19190610acd565b6106295760405162461bcd60e51b81526020600482015260096024820152681cd95b990819985a5b60ba1b6044820152606401610101565b5095945050505050565b606060028210156106775760405162461bcd60e51b815260206004820152600e60248201526d1c185d1a081d1bdbc81cda1bdc9d60921b6044820152606401610101565b8167ffffffffffffffff81111561069057610690610b80565b6040519080825280602002602001820160405280156106b9578160200160208202803683370190505b50905083816000815181106106d0576106d0610a93565b60200260200101818152505060005b6106ea600184610b05565b81101561092c5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a4390586868581811061073457610734610a93565b90506020020160208101906107499190610aa9565b8787610756876001610b1e565b81811061076557610765610a93565b905060200201602081019061077a9190610aa9565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa1580156107c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e99190610b31565b90506001600160a01b0381166108305760405162461bcd60e51b815260206004820152600c60248201526b70616972206d697373696e6760a01b6044820152606401610101565b806001600160a01b0316631befa6db86868581811061085157610851610a93565b90506020020160208101906108669190610aa9565b85858151811061087857610878610a93565b60200260200101516040518363ffffffff1660e01b81526004016108b19291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa1580156108ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f29190610b4e565b836108fe846001610b1e565b8151811061090e5761090e610a93565b6020908102919091010152508061092481610b67565b9150506106df565b509392505050565b60008083601f84011261094657600080fd5b50813567ffffffffffffffff81111561095e57600080fd5b6020830191508360208260051b850101111561097957600080fd5b9250929050565b6001600160a01b038116811461099557600080fd5b50565b6000806000806000608086880312156109b057600080fd5b8535945060208601359350604086013567ffffffffffffffff8111156109d557600080fd5b6109e188828901610934565b90945092505060608601356109f581610980565b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b81811015610a3b57835183529284019291840191600101610a1f565b50909695505050505050565b600080600060408486031215610a5c57600080fd5b83359250602084013567ffffffffffffffff811115610a7a57600080fd5b610a8686828701610934565b9497909650939450505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610abb57600080fd5b8135610ac681610980565b9392505050565b600060208284031215610adf57600080fd5b81518015158114610ac657600080fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610b1857610b18610aef565b92915050565b80820180821115610b1857610b18610aef565b600060208284031215610b4357600080fd5b8151610ac681610980565b600060208284031215610b6057600080fd5b5051919050565b600060018201610b7957610b79610aef565b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220698c63931da0974debf00e5bc245f09d577017b2f80328cb8e5dac91de8d9c2464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063472b43f314610046578063c45a01551461006f578063d06ca61f146100ae575b600080fd5b610059610054366004610998565b6100c1565b6040516100669190610a03565b60405180910390f35b6100967f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610066565b6100596100bc366004610a47565b610633565b6060600283101561010a5760405162461bcd60e51b815260206004820152600e60248201526d1c185d1a081d1bdbc81cda1bdc9d60921b60448201526064015b60405180910390fd5b6001600160a01b0382166101495760405162461bcd60e51b8152600401610101906020808252600490820152630746f3d360e41b604082015260600190565b8383600081811061015c5761015c610a93565b90506020020160208101906101719190610aa9565b6040516323b872dd60e01b8152336004820152306024820152604481018890526001600160a01b0391909116906323b872dd906064016020604051808303816000875af11580156101c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ea9190610acd565b6102225760405162461bcd60e51b81526020600482015260096024820152681c1d5b1b0819985a5b60ba1b6044820152606401610101565b61022d868585610633565b905084816001835161023f9190610b05565b8151811061024f5761024f610a93565b602002602001015110156102905760405162461bcd60e51b8152602060048201526008602482015267736c69707061676560c01b6044820152606401610101565b8560005b61029f600186610b05565b81101561054a5760008686838181106102ba576102ba610a93565b90506020020160208101906102cf9190610aa9565b9050600087876102e0856001610b1e565b8181106102ef576102ef610a93565b90506020020160208101906103049190610aa9565b60405163e6a4390560e01b81526001600160a01b03848116600483015280831660248301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063e6a4390590604401602060405180830381865afa158015610378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039c9190610b31565b90506001600160a01b0381166103e35760405162461bcd60e51b815260206004820152600c60248201526b70616972206d697373696e6760a01b6044820152606401610101565b60405163095ea7b360e01b81526001600160a01b0382811660048301526024820187905284169063095ea7b3906044016020604051808303816000875af1158015610432573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104569190610acd565b6104915760405162461bcd60e51b815260206004820152600c60248201526b185c1c1c9bdd994819985a5b60a21b6044820152606401610101565b600061049e60028a610b05565b85146104ab5760006104ad565b8a5b604051639f1d0f5960e01b81526001600160a01b0386811660048301526024820189905260448201839052919250600091841690639f1d0f59906064016020604051808303816000875af1158015610509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052d9190610b4e565b90508096505050505050808061054290610b67565b915050610294565b508484610558600182610b05565b81811061056757610567610a93565b905060200201602081019061057c9190610aa9565b60405163a9059cbb60e01b81526001600160a01b03858116600483015260248201849052919091169063a9059cbb906044016020604051808303816000875af11580156105cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f19190610acd565b6106295760405162461bcd60e51b81526020600482015260096024820152681cd95b990819985a5b60ba1b6044820152606401610101565b5095945050505050565b606060028210156106775760405162461bcd60e51b815260206004820152600e60248201526d1c185d1a081d1bdbc81cda1bdc9d60921b6044820152606401610101565b8167ffffffffffffffff81111561069057610690610b80565b6040519080825280602002602001820160405280156106b9578160200160208202803683370190505b50905083816000815181106106d0576106d0610a93565b60200260200101818152505060005b6106ea600184610b05565b81101561092c5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a4390586868581811061073457610734610a93565b90506020020160208101906107499190610aa9565b8787610756876001610b1e565b81811061076557610765610a93565b905060200201602081019061077a9190610aa9565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa1580156107c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e99190610b31565b90506001600160a01b0381166108305760405162461bcd60e51b815260206004820152600c60248201526b70616972206d697373696e6760a01b6044820152606401610101565b806001600160a01b0316631befa6db86868581811061085157610851610a93565b90506020020160208101906108669190610aa9565b85858151811061087857610878610a93565b60200260200101516040518363ffffffff1660e01b81526004016108b19291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa1580156108ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f29190610b4e565b836108fe846001610b1e565b8151811061090e5761090e610a93565b6020908102919091010152508061092481610b67565b9150506106df565b509392505050565b60008083601f84011261094657600080fd5b50813567ffffffffffffffff81111561095e57600080fd5b6020830191508360208260051b850101111561097957600080fd5b9250929050565b6001600160a01b038116811461099557600080fd5b50565b6000806000806000608086880312156109b057600080fd5b8535945060208601359350604086013567ffffffffffffffff8111156109d557600080fd5b6109e188828901610934565b90945092505060608601356109f581610980565b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b81811015610a3b57835183529284019291840191600101610a1f565b50909695505050505050565b600080600060408486031215610a5c57600080fd5b83359250602084013567ffffffffffffffff811115610a7a57600080fd5b610a8686828701610934565b9497909650939450505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610abb57600080fd5b8135610ac681610980565b9392505050565b600060208284031215610adf57600080fd5b81518015158114610ac657600080fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610b1857610b18610aef565b92915050565b80820180821115610b1857610b18610aef565b600060208284031215610b4357600080fd5b8151610ac681610980565b600060208284031215610b6057600080fd5b5051919050565b600060018201610b7957610b79610aef565b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220698c63931da0974debf00e5bc245f09d577017b2f80328cb8e5dac91de8d9c2464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "swapExactTokensForTokens(uint256,uint256,address[],address)": {
        "params": {
          "amountIn": "Input amount of path[0]",
          "minAmountOut": "Minimum acceptable output for the final token",
          "path": "Array of token addresses (e.g., [TokenA, TokenB, TokenC])",
          "to": "Recipient of final output tokens"
        }
      }
    },
    "title": "DEXRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "swapExactTokensForTokens(uint256,uint256,address[],address)": {
        "notice": "Swap exact tokens across a path of pairs. Caller must approve the router for amountIn of path[0]."
      }
    },
    "notice": "Simple router to execute multi-hop swaps across SimpleDEX pairs created by DEXFactory",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}