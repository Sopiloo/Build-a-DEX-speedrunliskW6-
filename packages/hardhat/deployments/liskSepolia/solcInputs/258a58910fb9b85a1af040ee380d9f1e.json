{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/ConcentratedDEX.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n/**\n * @title ConcentratedDEX (v3-lite)\n * @notice Educational, simplified concentrated liquidity AMM with ranged positions.\n * NOT production-ready. Math is simplified and tick stepping is limited.\n */\ncontract ConcentratedDEX is ReentrancyGuard {\n    // Tokens\n    address public immutable token0;\n    address public immutable token1;\n\n    // Fee in basis points (e.g., 30 = 0.30%)\n    uint24 public immutable feeBps;\n\n    // Current price as sqrtPriceX96 and current tick (coarse)\n    uint160 public sqrtPriceX96;\n    int24 public tickCurrent;\n\n    // Active in-range liquidity at current tick\n    uint128 public liquidity; // simplified single active liquidity bucket at current tick\n\n    // Tick spacing (coarse grid). Example: 100 = ~1% if ticks are pseudo-%.\n    int24 public immutable tickSpacing;\n\n    struct TickInfo {\n        int128 liquidityNet; // net liquidity change when crossing this tick\n        bool initialized;\n    }\n\n    // tick index => info\n    mapping(int24 => TickInfo) public ticks;\n\n    struct Position {\n        uint128 liquidity; // position liquidity\n        int24 lowerTick;\n        int24 upperTick;\n        address owner;\n    }\n\n    // key = keccak256(abi.encode(owner, lowerTick, upperTick))\n    mapping(bytes32 => Position) public positions;\n\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n    event Mint(address indexed owner, int24 indexed lowerTick, int24 indexed upperTick, uint128 liquidity, uint256 amount0, uint256 amount1);\n    event Burn(address indexed owner, int24 indexed lowerTick, int24 indexed upperTick, uint128 liquidity, uint256 amount0, uint256 amount1);\n    event Swap(address indexed sender, bool zeroForOne, uint256 amountIn, uint256 amountOut, uint160 sqrtPriceX96, int24 tickCurrent);\n\n    error InvalidTickRange();\n    error NotInitialized();\n    error ZeroLiquidity();\n\n    constructor(address _token0, address _token1, uint24 _feeBps, int24 _tickSpacing) {\n        require(_token0 != address(0) && _token1 != address(0) && _token0 != _token1, \"bad tokens\");\n        require(_feeBps <= 10_000, \"fee too high\");\n        token0 = _token0;\n        token1 = _token1;\n        feeBps = _feeBps;\n        tickSpacing = _tickSpacing;\n    }\n\n    // --- Utils (extremely simplified for demo) ---\n    function _tickToSqrtPriceX96(int24 tick) internal pure returns (uint160) {\n        // For demo: sqrtPriceX96 = 2^(tick/64) scaled. This is NOT accurate; replace with real tick math in production.\n        // We map tick to a simple linear scale for demonstration.\n        int256 base = 1e12 + int256(tick) * 1e9; // fake scale\n        if (base <= 0) base = 1; \n        return uint160(uint256(int256(base)));\n    }\n\n    function initialize(uint160 _sqrtPriceX96, int24 _tick) external {\n        require(sqrtPriceX96 == 0, \"already init\");\n        sqrtPriceX96 = _sqrtPriceX96;\n        tickCurrent = _tick;\n        emit Initialize(_sqrtPriceX96, _tick);\n    }\n\n    function _positionKey(address owner, int24 lowerTick, int24 upperTick) internal pure returns (bytes32) {\n        return keccak256(abi.encode(owner, lowerTick, upperTick));\n    }\n\n    function _updateTicks(int24 lowerTick, int24 upperTick, int128 liqDelta) internal {\n        TickInfo storage lower = ticks[lowerTick];\n        TickInfo storage upper = ticks[upperTick];\n        lower.liquidityNet += liqDelta;\n        lower.initialized = true;\n        upper.liquidityNet -= liqDelta;\n        upper.initialized = true;\n    }\n\n    // Compute required amounts (very simplified approximation using current price only)\n    function _amountsForLiquidity(uint128 liq) internal view returns (uint256 amount0, uint256 amount1) {\n        if (sqrtPriceX96 == 0) revert NotInitialized();\n        // Pretend token amounts are proportional to liquidity at current price\n        amount0 = (uint256(liq) * 1e12) / 1e6; // arbitrary scale\n        amount1 = (uint256(liq) * 1e12) / 1e6; // symmetric for demo\n    }\n\n    function mint(address owner, int24 lowerTick, int24 upperTick, uint128 liq, address payer)\n        external\n        nonReentrant\n        returns (uint256 amount0, uint256 amount1)\n    {\n        if (upperTick <= lowerTick || ((lowerTick % tickSpacing) != 0) || ((upperTick % tickSpacing) != 0)) revert InvalidTickRange();\n        if (liq == 0) revert ZeroLiquidity();\n        if (sqrtPriceX96 == 0) revert NotInitialized();\n\n        bytes32 key = _positionKey(owner, lowerTick, upperTick);\n        Position storage p = positions[key];\n        if (p.owner == address(0)) {\n            p.owner = owner;\n            p.lowerTick = lowerTick;\n            p.upperTick = upperTick;\n        }\n\n        // Update global tick structures\n        _updateTicks(lowerTick, upperTick, int128(int256(uint256(liq))));\n\n        // If current tick within range, add to active liquidity (demo behavior)\n        if (tickCurrent >= lowerTick && tickCurrent < upperTick) {\n            liquidity += liq;\n        }\n\n        // Pull tokens from payer according to simplified formula\n        (amount0, amount1) = _amountsForLiquidity(liq);\n        require(IERC20(token0).transferFrom(payer, address(this), amount0), \"pull0\");\n        require(IERC20(token1).transferFrom(payer, address(this), amount1), \"pull1\");\n\n        // Update position\n        p.liquidity += liq;\n\n        emit Mint(owner, lowerTick, upperTick, liq, amount0, amount1);\n    }\n\n    function burn(address owner, int24 lowerTick, int24 upperTick, uint128 liq, address to)\n        external\n        nonReentrant\n        returns (uint256 amount0, uint256 amount1)\n    {\n        bytes32 key = _positionKey(owner, lowerTick, upperTick);\n        Position storage p = positions[key];\n        require(p.owner == owner && p.liquidity >= liq, \"pos\");\n\n        // Update ticks\n        _updateTicks(lowerTick, upperTick, -int128(int256(uint256(liq))));\n\n        if (tickCurrent >= lowerTick && tickCurrent < upperTick) {\n            // reduce active liquidity\n            if (liq > liquidity) liq = liquidity;\n            liquidity -= liq;\n        }\n\n        // Return tokens by same simplified formula\n        (amount0, amount1) = _amountsForLiquidity(liq);\n        require(IERC20(token0).transfer(to, amount0), \"send0\");\n        require(IERC20(token1).transfer(to, amount1), \"send1\");\n\n        p.liquidity -= liq;\n\n        emit Burn(owner, lowerTick, upperTick, liq, amount0, amount1);\n    }\n\n    function swap(bool zeroForOne, uint256 amountSpecified, address to)\n        external\n        nonReentrant\n        returns (uint256 amountOut)\n    {\n        if (sqrtPriceX96 == 0) revert NotInitialized();\n        require(amountSpecified > 0, \"amt\");\n\n        // Fee\n        uint256 fee = (amountSpecified * feeBps) / 10_000;\n        uint256 amountAfterFee = amountSpecified - fee;\n\n        if (zeroForOne) {\n            // swap token0 -> token1\n            require(IERC20(token0).transferFrom(msg.sender, address(this), amountSpecified), \"pull0\");\n            // Demo price impact: move one tick per swap\n            tickCurrent -= tickSpacing;\n            sqrtPriceX96 = _tickToSqrtPriceX96(tickCurrent);\n            amountOut = amountAfterFee; // symmetrical demo\n            require(IERC20(token1).transfer(to, amountOut), \"send1\");\n        } else {\n            // swap token1 -> token0\n            require(IERC20(token1).transferFrom(msg.sender, address(this), amountSpecified), \"pull1\");\n            tickCurrent += tickSpacing;\n            sqrtPriceX96 = _tickToSqrtPriceX96(tickCurrent);\n            amountOut = amountAfterFee;\n            require(IERC20(token0).transfer(to, amountOut), \"send0\");\n        }\n\n        emit Swap(msg.sender, zeroForOne, amountSpecified, amountOut, sqrtPriceX96, tickCurrent);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}